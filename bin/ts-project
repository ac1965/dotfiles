#!/bin/bash

set -e

usage() {
  _script_name=$(basename $0)
  cat <<DOC
  ${_script_name} [--help|--with-mocha|--with-espower-babel]
DOC
}

root_dir=.
npm_test_command=''
with_mocha=0
with_espower_babel=0
while [[ $# > 0 ]]; do
  case "$1" in
    --help)
      usage
      exit 0
      ;;
    --with-mocha)
      with_mocha=1
      ;;
    --with-espower-babel)
      with_espower_babel=1
      ;;
  esac
  shift
done

json_satisfy() {
  jq --exit-status "$2" < $1 >/dev/null
}

pkg_satisfy() {
  json_satisfy ${root_dir}/package.json "$1"
}

update_json() {
  cat "$1" | jq --unbuffered "$2" | tee "$1"
}

if [[ ! -d "${root_dir}/.git" ]]; then
  echo '---> Not Git repository'
  echo '---> Try to git init ...'
  git init
  git commit --allow-empty --message ':sunrise:'
fi

if [[ ! -f "${root_dir}/package.json" ]]; then
  echo '---> npm init ...'
  npm init --yes
fi

if ! git check-ignore --quiet 'node_modules'; then
  echo '---> Ignore node_modules ...'
  echo 'node_modules' >> .gitignore
fi

if ! pkg_satisfy '.devDependencies | has("typescript")'; then
  echo '---> Install TypeScript ...'
  npm install --save-dev typescript
fi

if [[ $with_mocha -eq 1 ]]; then
  if ! pkg_satisfy '.devDependencies | has("mocha")'; then
    echo '---> Install mocha ...'
    npm install --save-dev mocha
  fi
  npm_test_command='mocha'

  if [[ $with_espower_babel -eq 1 ]]; then
    if ! pkg_satisfy '.devDependencies | has("espower-babel")'; then
      echo '---> Install espower-babel ...'
      npm install --save-dev espower-babel
    fi
    npm_test_command='mocha --compilers js:espower-babel/guess'
  fi

  if ! pkg_satisfy ".scripts.test == \"${npm_test_command}\""; then
    echo '---> configure `npm test` ...'
    update_json "${root_dir}/package.json" "map_values(if type == \"object\" and has(\"test\") then .test = \"${npm_test_command}\" else . end)"
  fi
fi

if [[ ! -f "${root_dir}/tsconfig.json" ]]; then
  echo '---> Create tsconfig.json ...'
  $(npm bin)/tsc --init
fi

if ! json_satisfy ${root_dir}/tsconfig.json '.compilerOptions.target == "es5"'; then
  echo '---> Set target version to ES5 ...'
  update_json "${root_dir}/tsconfig.json" 'map_values(if type == "object" and has("target") then .target = "es5" else . end)'
fi

if ! json_satisfy ${root_dir}/tsconfig.json '.compilerOptions.noImplicitAny == true'; then
  echo '---> Refuse implicit any ...'
  update_json "${root_dir}/tsconfig.json" 'map_values(if type == "object" and has("noImplicitAny") then .noImplicitAny = true else . end)'
fi

if ! pkg_satisfy '.scripts.build == "tsc"'; then
  echo '---> Configure npm run build'
  update_json "${root_dir}/package.json" 'map_values(if type == "object" and has("test") then .build = "tsc" else . end)'
fi

if ! pkg_satisfy '.devDependencies | has("dtsm")'; then
  echo '---> Install dtsm ...'
  npm install --save-dev dtsm
fi

if [[ ! -f "${root_dir}/dtsm.json" ]]; then
  echo '---> Generate dtsm.json'
  $(npm bin)/dtsm --insight false init
fi

if ! git check-ignore --quiet 'typings'; then
  echo '---> Ignore typings ...'
  echo 'typings' >> .gitignore
fi
